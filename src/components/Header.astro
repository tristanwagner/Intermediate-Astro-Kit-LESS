---
import navData from "@data/navData.json";
---

<!-- ============================================ --><!--                 Navigation                   --><!-- ============================================ -->
<header id="cs-navigation">
  <div class="cs-container">
    <!--Nav Logo-->
    <a href="/" class="cs-logo" aria-label="back to home">
      <img
        src="/assets/svgs/logo-black.svg"
        alt="logo"
        width="210"
        height="29"
        aria-hidden="true"
        decoding="async"
      />
    </a>
    <!--Navigation List-->
    <nav class="cs-nav" role="navigation">
      <!--Mobile Nav Toggle-->
      <button class="cs-toggle" aria-label="mobile menu toggle">
        <div class="cs-box" aria-hidden="true">
          <span class="cs-line cs-line1" aria-hidden="true"></span>
          <span class="cs-line cs-line2" aria-hidden="true"></span>
          <span class="cs-line cs-line3" aria-hidden="true"></span>
        </div>
      </button>
      <!-- We need a wrapper div so we can set a fixed height on the cs-ul in case the nav list gets too long from too many dropdowns being opened and needs to have an overflow scroll. This wrapper acts as the background so it can go the full height of the screen and not cut off any overflowing nav items while the cs-ul stops short of the bottom of the screen, which keeps all nav items in view no matter how mnay there are-->
      <!-- This also allows for easy substitution of CodeStitch navigations. Just replace the .cs-ul-wrapper in the new navigation with this one -->
      <div class="cs-ul-wrapper">
        <ul id="cs-expanded" class="cs-ul" aria-expanded="false">
          {
            navData.map((entry) => (
              <li
                class:list={[
                  "cs-li",
                  { "cs-dropdown": entry.children?.length > 0 },
                ]}
                tabindex={entry.children?.length > 0 ? "0" : ""}
              >
                <a
                  href={entry.url}
                  class:list={[
                    "cs-li-link",
                    { "cs-active": Astro.url.pathname === entry.url },
                  ]}
                >
                  {entry.key}
                </a>
                {entry.children?.length > 0 && (
                  <ul class="cs-drop-ul">
                    {entry.children.map((child) => (
                      <li class="cs-drop-li">
                        <a href={child.url} class="cs-li-link cs-drop-link">
                          {child.key}
                        </a>
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))
          }
        </ul>
      </div>
    </nav>
    <a href="/contact" class="cs-button-solid cs-nav-button">Contact Us</a>
    <!--Dark Mode toggle, uncomment button code if you want to enable a dark mode toggle-->
    <button id="dark-mode-toggle" aria-label="dark mode toggle">
      <img
        class="cs-moon"
        aria-hidden="true"
        src="/assets/svgs/moon.svg"
        decoding="async"
        alt="moon"
        width="15"
        height="15"
      />
      <img
        class="cs-sun"
        aria-hidden="true"
        src="/assets/svgs/sun.svg"
        decoding="async"
        alt="sun"
        width="15"
        height="15"
      />
    </button>
  </div>
</header>
